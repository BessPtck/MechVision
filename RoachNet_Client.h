#pragma once
#ifndef ROACHNET_CLIENT_H
#define ROACHNET_CLIENT_H

#ifndef ROACHNET_H
#include "RoachNet.h"
#endif
/*note video streaming from openCV is at least order of mag slower than results reported : need to redo compile of openCV*/
class RoachNet_Client :public RoachNet {
public:
	RoachNet_Client();
	~RoachNet_Client();
	bool init(unsigned char msg[],
		int deviceID = 0,
		int apiID = CAP_ANY
	);/*initalized client puts int message sent to server in msg*/
	void release();
	bool init_vid(unsigned char msg[]);/*function for tests, runs off of a video on the disk instead of live image*/
	void release_vid();
	int TransNext(unsigned char msg[]);/*msg & int are returned msg contains plate data to render & int is the lenght of the message -1 for fail*/
protected:
	VideoCapture* m_vcap;
	int m_deviceID;
	int m_apiID;

	Hex* m_hexLow; /*hex that is created to have the structure of the base layer on top of the frame returned from the camera*/
	PatLunaLayer* m_lunaLayer; /*master class for processing the hex plates generated by convuluting the lunas over
							   the base image. This class also does the color selection processing */
	LineFinder* m_lineFinder;/*class that runs over one of the luna layers and finds lines, single luna traces
							  where the single lunas are adjoining eachother */
	DrivePlane* m_drivePlane; /*class that takes the lines from line finder and transforms them onto the  drive
							  plane correcting for camera distortion */
	DriveLines* m_driveLines;/*class that finds the best candidate line from the lines projected onto drive plane
							 that appears to be a lane line and generates steering values accordingly*/

							 /*used each loop*/
	Mat* m_vframe;
	Img* m_imgRender;/*image that will hold the data rendered each frame*/


	bool init_vision();/*initalize all the classes that do the image processing*/
	void release_vision();
	unsigned char exFrame_vision();/*runs all the code that does the image processing*/
};

#endif



